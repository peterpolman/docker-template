<?php

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */

use Drupal\image\Entity\ImageStyle;

/**
 * Implements template_preprocess_html().
 */
function mintpuur_preprocess_html(array &$variables) {
  $current_route = \Drupal::routeMatch();
  $node = $current_route->getParameters()->get('node');
  $term = $current_route->getParameters()->get('taxonomy_term');

  if (!empty($node)) {

    if ($node->getType() === 'homepage') {
      $uri = $node->get('field_header_image')->entity->uri->value;
      $variables['header_image'] = ImageStyle::load('jumbotron_image')->buildUrl($uri);
    }

    if ($node->getType() === 'pagina') {
      $uri = $node->get('field_header_image')->entity->uri->value;
      $variables['header_image'] = ImageStyle::load('header_image')->buildUrl($uri);
    }

    if ($node->getType() === 'workshop') {
      $new_node = $node->get('field_workshop_type')->referencedEntities();
      $uri = $new_node[0]->get('field_workshop_header_image')->entity->uri->value;
      $variables['header_image'] = ImageStyle::load('header_image')->buildUrl($uri);
    }
  }

  if (!empty($term)) {
    $fields = $term->getFields();
    $field = $fields['field_workshop_header_image']->getValue();

    if (!empty($field)) {
      $uri = file_load($field[0]['target_id'])->getFileUri();
      $variables['header_image'] = ImageStyle::load('header_image')->buildUrl($uri);
    }
  }

  // Add class to body for maintenance page.
  if (!empty($variables['page']['#theme']) && $variables['page']['#theme'] === 'maintenance_page') {
    $variables['attributes']['class'][] = 'page-offline';
    // We set the rootpath for the Jumbotron image path. See html.html.twig.
    $variables['root_path'] = 'offline';
  }
}

function mintpuur_preprocess_page(array &$variables) {
  $access_token = "30798236.1677ed0.2074b25b9d5a48768423a993f02eac1a";
  $return = rudr_instagram_api_curl_connect("https://api.instagram.com/v1/users/self/media/recent/?access_token=" . $access_token . '&count=3');

  foreach ($return->data as $post) {
  	$variables['instagram'][] = array(
      'url' => $post->images->standard_resolution->url,
      'src' => $post->images->standard_resolution->url,
    );
  }
}

/**
 * Implements template_preprocess_taxonomy_term().
 */
function mintpuur_preprocess_taxonomy_term(array &$variables) {
    // kint($variables);
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function mintpuur_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables, $hook) {
  $suggestions[] = $hook . '__custom';
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function mintpuur_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables, $hook) {
  $suggestions[] = $hook . '__workshops__' . $variables['elements']['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function mintpuur_theme_suggestions_form_alter(array &$suggestions, array $variables, $hook) {
  $suggestions[] = $hook . '__' . $variables['element']['#form_id'];
}

/**
 * Implements rudr_instagram_api_curl_connect().
 */
function rudr_instagram_api_curl_connect( $api_url ){
	$connection_c = curl_init();
	curl_setopt( $connection_c, CURLOPT_URL, $api_url );
	curl_setopt( $connection_c, CURLOPT_RETURNTRANSFER, 1 );
	curl_setopt( $connection_c, CURLOPT_TIMEOUT, 20 );
	$json_return = curl_exec( $connection_c );
	curl_close( $connection_c );
	return json_decode( $json_return );
}
